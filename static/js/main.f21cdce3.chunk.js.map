{"version":3,"sources":["EditableUsersTable.tsx","EditableTableForm.tsx","App.tsx","index.tsx"],"names":["Column","Table","EditableUsersTable","props","users","form","add","remove","useState","undefined","editingIndex","setEditingIndex","isNewUser","setNewUser","addUser","length","onSave","validateFields","then","catch","error","console","log","errorFields","dataSource","pagination","footer","onClick","PlusOutlined","dataIndex","title","width","render","value","row","index","name","editing","className","placeholder","min","max","rules","required","message","icon","SaveOutlined","shape","type","style","marginRight","CloseOutlined","resetFields","onCancel","EditOutlined","disabled","okText","cancelText","onConfirm","MinusOutlined","EditableFormItem","rest","Item","children","Dummy","paddingLeft","mockData","userlistName","age","EditableTableForm","data","setData","useForm","onFinish","values","notification","success","description","JSON","stringify","initialValues","label","List","info","ReloadOutlined","htmlType","marginLeft","App","padding","document","getElementById"],"mappings":"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","file":"static/js/main.f21cdce3.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport * as React from \"react\";\nimport { Form, Input, Button, Table, InputNumber, Popconfirm } from \"antd\";\nimport {\n  PlusOutlined,\n  EditOutlined,\n  MinusOutlined,\n  SaveOutlined,\n  CloseOutlined\n} from \"@ant-design/icons\";\nimport { FieldData } from \"rc-field-form/lib/interface\";\nimport { FormInstance } from \"antd/lib/form/util\";\nimport { FormItemProps } from \"antd/lib/form\";\n\nconst { Column } = Table;\n\ninterface User {\n  name: string;\n  age: number;\n}\n\ninterface EditableUsersTableProps {\n  readonly users: FieldData[];\n  readonly form: FormInstance;\n  readonly add: () => void;\n  readonly remove: (index: number) => void;\n}\n\nexport const EditableUsersTable: React.FC<EditableUsersTableProps> = props => {\n  const { users, form, add, remove } = props;\n  const [editingIndex, setEditingIndex] = useState<number | undefined>(\n    undefined\n  );\n  const [isNewUser, setNewUser] = useState<boolean>(false);\n\n  const addUser = () => {\n    add();\n    setEditingIndex(users.length);\n    setNewUser(true);\n  };\n\n  const onSave = () => {\n    form\n      .validateFields()\n      .then(() => {\n        setNewUser(false);\n        setEditingIndex(undefined);\n      })\n      .catch(error => {\n        console.log(error.errorFields);\n      });\n  };\n\n  const onCancel = (index: number) => {\n    if (isNewUser) {\n      remove(index);\n    } else {\n      form.resetFields([[\"users\", index, \"age\"], [\"users\", index, \"name\"]]);\n    }\n\n    setNewUser(false);\n    setEditingIndex(undefined);\n  };\n\n  return (\n    <Table\n      dataSource={users}\n      pagination={false}\n      footer={() => (\n        <Button onClick={addUser}>\n          <PlusOutlined /> Add User\n        </Button>\n      )}\n    >\n      <Column\n        dataIndex={\"age\"}\n        title={\"Age\"}\n        width={125}\n        render={(value, row, index) => {\n          return (\n            <EditableFormItem\n              name={[index, \"age\"]}\n              editing={index === editingIndex}\n              className={\"ant-form-item-no-bottom-margin\"}\n            >\n              <InputNumber placeholder=\"age\" min={0} max={150} />\n            </EditableFormItem>\n          );\n        }}\n      />\n      <Column\n        dataIndex={\"name\"}\n        title={\"Name\"}\n        width={200}\n        render={(value, row, index) => {\n          return (\n            <EditableFormItem\n              rules={[{ required: true, message: \"Name is required\" }]}\n              name={[index, \"name\"]}\n              editing={index === editingIndex}\n              className={\"ant-form-item-no-bottom-margin\"}\n            >\n              <Input placeholder=\"name\" />\n            </EditableFormItem>\n          );\n        }}\n      />\n      <Column\n        title={\"Action\"}\n        render={(value, row, index) => {\n          if (index === editingIndex) {\n            return (\n              <React.Fragment>\n                <Button\n                  icon={<SaveOutlined />}\n                  shape={\"circle\"}\n                  type={\"primary\"}\n                  style={{ marginRight: 8 }}\n                  onClick={onSave}\n                />\n                <Button\n                  icon={<CloseOutlined />}\n                  shape={\"circle\"}\n                  onClick={() => onCancel(index)}\n                />\n              </React.Fragment>\n            );\n          } else {\n            return (\n              <React.Fragment>\n                <Button\n                  icon={<EditOutlined />}\n                  shape={\"circle\"}\n                  style={{ marginRight: 8 }}\n                  disabled={editingIndex !== undefined}\n                  onClick={() => setEditingIndex(index)}\n                />\n                <Popconfirm\n                  title=\"Are you sureï¼Ÿ\"\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                  onConfirm={() => remove(index)}\n                >\n                  <Button\n                    icon={<MinusOutlined />}\n                    shape={\"circle\"}\n                    type={\"danger\"}\n                    disabled={editingIndex !== undefined}\n                  />\n                </Popconfirm>\n              </React.Fragment>\n            );\n          }\n        }}\n      />\n    </Table>\n  );\n};\n\ninterface EditableFormItemProps extends FormItemProps {\n  readonly editing: boolean;\n}\n\nconst EditableFormItem: React.FC<EditableFormItemProps> = props => {\n  const { editing, ...rest } = props;\n  return (\n    <Form.Item {...rest}>{editing ? props.children : <Dummy />}</Form.Item>\n  );\n};\n\ninterface DummyProps {\n  readonly value?: any;\n}\n\nconst Dummy: React.FC<DummyProps> = props => (\n  <div style={{ paddingLeft: 12 }}>{props.value}</div>\n);\n","import * as React from \"react\";\nimport { Form, Input, Button, notification, Row } from \"antd\";\nimport { EditableUsersTable } from \"./EditableUsersTable\";\nimport { useForm } from \"antd/lib/form/util\";\nimport { useState } from \"react\";\nimport { SaveOutlined, ReloadOutlined } from \"@ant-design/icons\";\n\nconst mockData = {\n  userlistName: \"Students\",\n  users: [\n    {\n      age: 25,\n      name: \"John\"\n    },\n    {\n      age: 23,\n      name: \"Marry\"\n    },\n    {\n      age: 42,\n      name: \"Kyle\"\n    }\n  ]\n};\n\nexport const EditableTableForm = () => {\n  const [data, setData] = useState(mockData);\n  const [form] = useForm();\n\n  const onFinish = (values: any) => {\n    notification.success({\n      message: \"Submit\",\n      description: `Received values of form: ${JSON.stringify(values)}`\n    });\n    setData(values);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n    notification.info({\n      message: \"Reset\",\n      description: \"Fields reset to original values.\"\n    });\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"dynamic_form_item\"\n      onFinish={onFinish}\n      initialValues={data}\n    >\n      <Form.Item name={[\"userlistName\"]} label={\"User List Name\"}>\n        <Input placeholder=\"Please enter a name\" style={{ width: \"30%\" }} />\n      </Form.Item>\n      <Form.List name=\"users\">\n        {(users, { add, remove }) => (\n          <EditableUsersTable\n            form={form}\n            users={users}\n            add={add}\n            remove={remove}\n          />\n        )}\n      </Form.List>\n      <br />\n      <Row>\n        <Form.Item>\n          <Button type=\"default\" onClick={onReset} icon={<ReloadOutlined />}>\n            Reset\n          </Button>\n        </Form.Item>\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            icon={<SaveOutlined />}\n            style={{ marginLeft: 8 }}\n          >\n            Submit\n          </Button>\n        </Form.Item>\n      </Row>\n    </Form>\n  );\n};\n","import * as React from \"react\";\nimport { EditableTableForm } from \"./EditableTableForm\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\" style={{ padding: 24 }}>\n      <EditableTableForm />\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { render } from \"react-dom\";\n\nimport { App } from \"./App\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}